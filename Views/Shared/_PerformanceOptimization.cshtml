@{
    ViewData["PreconnectUrls"] = new[]
    {
        "https://fonts.googleapis.com",
        "https://fonts.gstatic.com",
        "https://cdnjs.cloudflare.com",
        "https://cdn.jsdelivr.net"
    };
    
    ViewData["PreloadResources"] = new[]
    {
        new { href = "/css/bootstrap.min.css", type = "text/css" },
        new { href = "/css/trangchu.css", type = "text/css" },
        new { href = "/js/jquery.min.js", type = "text/javascript" }
    };
}

@if (ViewData["PreconnectUrls"] is string[] preconnectUrls)
{
    foreach (var url in preconnectUrls)
    {
        <link rel="preconnect" href="@url" crossorigin>
    }
}

@if (ViewData["PreloadResources"] is dynamic[] preloadResources)
{
    foreach (var resource in preloadResources)
    {
        if (resource.type == "text/css")
        {
            <link rel="preload" href="@resource.href" as="style" onload="this.onload=null;this.rel='stylesheet'">
            <noscript><link rel="stylesheet" href="@resource.href"></noscript>
        }
        else if (resource.type == "text/javascript")
        {
            <link rel="preload" href="@resource.href" as="script">
        }
    }
}

<!-- Critical CSS inline -->
<style>
/* Critical above-the-fold styles */
body { font-family: system-ui, -apple-system, sans-serif; margin: 0; }
.container { max-width: 1200px; margin: 0 auto; padding: 0 15px; }
.hero-section { min-height: 50vh; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
.loading { opacity: 0; transition: opacity 0.3s ease; }
.loaded { opacity: 1; }

/* Image optimization */
img { max-width: 100%; height: auto; }
picture img { width: 100%; height: auto; object-fit: cover; }

/* Layout Shift Prevention */
.image-placeholder {
    background: #f0f0f0;
    position: relative;
    overflow: hidden;
}

.image-placeholder::before {
    content: '';
    display: block;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
}

.image-placeholder img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
}
</style>

<!-- Font loading optimization -->
<script>
// Font loading with fallback
if ('fonts' in document) {
    Promise.all([
        document.fonts.load('400 1em "Roboto"'),
        document.fonts.load('700 1em "Roboto"')
    ]).then(() => {
        document.documentElement.classList.add('fonts-loaded');
    });
}

// Image lazy loading fallback
if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src;
                img.classList.remove('loading');
                img.classList.add('loaded');
                observer.unobserve(img);
            }
        });
    });

    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('img[data-src]').forEach(img => {
            imageObserver.observe(img);
        });
    });
}

// Preload next page resources on hover
document.addEventListener('DOMContentLoaded', () => {
    const links = document.querySelectorAll('a[href^="/"]');
    links.forEach(link => {
        link.addEventListener('mouseenter', () => {
            if (!link.dataset.preloaded) {
                const preloadLink = document.createElement('link');
                preloadLink.rel = 'prefetch';
                preloadLink.href = link.href;
                document.head.appendChild(preloadLink);
                link.dataset.preloaded = 'true';
            }
        });
    });
});
</script>
