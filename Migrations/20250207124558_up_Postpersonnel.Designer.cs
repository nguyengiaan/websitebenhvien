// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using websitebenhvien.Data;

#nullable disable

namespace websitebenhvien.Migrations
{
    [DbContext(typeof(MyDbcontext))]
    [Migration("20250207124558_up_Postpersonnel")]
    partial class up_Postpersonnel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.ButtonSample", b =>
                {
                    b.Property<int>("Id_ButtonSample")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_ButtonSample"));

                    b.Property<int>("Id_SampleMessage")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_ButtonSample");

                    b.HasIndex("Id_SampleMessage");

                    b.ToTable("ButtonSample", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Categorynews", b =>
                {
                    b.Property<string>("Id_Categorynews")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Alias_url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Categorynews");

                    b.ToTable("Categorynews", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Categoryproduct", b =>
                {
                    b.Property<string>("Id_Categoryproduct")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Alias_url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Categoryproduct");

                    b.ToTable("Categoryproduct", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Chat", b =>
                {
                    b.Property<string>("Id_chat")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id_Receiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id_Sender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id_chat");

                    b.ToTable("Chat", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Doctor", b =>
                {
                    b.Property<int>("Id_doctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_doctor"));

                    b.Property<string>("Alias_url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Award")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experiencework")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id_specialty")
                        .HasColumnType("int");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Research")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Specialize")
                        .HasColumnType("int");

                    b.Property<string>("Thumnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Training")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_doctor");

                    b.HasIndex("Id_specialty");

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Feeldoctor", b =>
                {
                    b.Property<int>("Id_Feeldoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Feeldoctor"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Evaluate")
                        .HasColumnType("int");

                    b.Property<int>("Id_Doctor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Feeldoctor");

                    b.HasIndex("Id_Doctor");

                    b.ToTable("Feeldoctor", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Footer", b =>
                {
                    b.Property<string>("Id_footer")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("linkcdha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("linkdn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("linkdnbs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("linkface")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("linkgt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("linkkb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("linknt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("linktd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("linktn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("linktwiter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("linkxn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("linkyoutube")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_footer");

                    b.ToTable("Footer", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Header", b =>
                {
                    b.Property<string>("Id_header")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_header");

                    b.ToTable("Header", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.ListvideoSpectialty", b =>
                {
                    b.Property<int>("Id_ListvideoSpectialty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_ListvideoSpectialty"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id_Specialty")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_ListvideoSpectialty");

                    b.HasIndex("Id_Specialty");

                    b.ToTable("ListvideoSpectialty", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Logocustomer", b =>
                {
                    b.Property<string>("Id_logocustomer")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Attime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id_logocustomer");

                    b.ToTable("Logocustomer", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Machine", b =>
                {
                    b.Property<int>("Id_machine")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_machine"));

                    b.Property<DateTime>("CreatedBy")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description_machine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image_machine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_machine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id_machine");

                    b.ToTable("Machine", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Makeanappointment", b =>
                {
                    b.Property<int>("Id_Make")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Make"));

                    b.Property<DateTime>("Examinationtime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Specialty")
                        .HasColumnType("int");

                    b.Property<string>("Name_doctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Make");

                    b.HasIndex("Id_Specialty");

                    b.ToTable("Makeanappointment", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Menu", b =>
                {
                    b.Property<string>("Id_menu")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link_menu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order_menu")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title_menu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_menu");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Menuchild", b =>
                {
                    b.Property<string>("Id_MenuChild")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id_menu")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Link_MenuChild")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order_menu")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title_MenuChild")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_MenuChild");

                    b.HasIndex("Id_menu");

                    b.ToTable("MenuChild", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.News", b =>
                {
                    b.Property<int>("Id_News")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_News"));

                    b.Property<string>("Alias_url")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id_Categorynews")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_News");

                    b.HasIndex("Alias_url")
                        .IsUnique();

                    b.HasIndex("Id_Categorynews");

                    b.ToTable("News", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Notification", b =>
                {
                    b.Property<string>("Id_Notification")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Notification");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.PermissionUser", b =>
                {
                    b.Property<int>("id_Permission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_Permission"));

                    b.Property<int>("id_PermissionUser")
                        .HasColumnType("int");

                    b.Property<string>("id_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id_Permission");

                    b.HasIndex("id_PermissionUser");

                    b.HasIndex("id_user");

                    b.ToTable("PermissionUser", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Permissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title_permision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Postpersonnel", b =>
                {
                    b.Property<int>("id_recruitmentpost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_recruitmentpost"));

                    b.Property<string>("Content_recruitmentpost")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date_recruitmentpost")
                        .HasMaxLength(2147483647)
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Statuson")
                        .HasMaxLength(2147483647)
                        .HasColumnType("bit");

                    b.Property<string>("title_recruitmentpost")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_recruitmentpost");

                    b.ToTable("Postpersonnel", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Postrelate", b =>
                {
                    b.Property<int>("Id_Postrelate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Postrelate"));

                    b.Property<string>("Alias_url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id_Specialty")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Postrelate");

                    b.HasIndex("Id_Specialty");

                    b.ToTable("Postrelate", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Product", b =>
                {
                    b.Property<string>("Id_product")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Alias_url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Createat")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id_Categoryproduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Product_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_product");

                    b.HasIndex("Id_Categoryproduct");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Proimages", b =>
                {
                    b.Property<string>("Id_proimages")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id_product")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_proimages");

                    b.HasIndex("Id_product");

                    b.ToTable("Proimages", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Recruitment", b =>
                {
                    b.Property<string>("Id_Recruitment")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CV_Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Recruitment");

                    b.ToTable("Recruitment", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Recruitmentpost", b =>
                {
                    b.Property<int>("id_recruitmentpost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_recruitmentpost"));

                    b.HasKey("id_recruitmentpost");

                    b.ToTable("Recruitmentpost", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Registerhealth", b =>
                {
                    b.Property<int>("Id_Registerhealth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Registerhealth"));

                    b.Property<DateTime>("Examinationtime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Registerhealth");

                    b.ToTable("Registerhealth", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.SampleMessage", b =>
                {
                    b.Property<int>("Id_SampleMessager")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_SampleMessager"));

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reply")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_SampleMessager");

                    b.ToTable("SampleMessage", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Sharecustomer", b =>
                {
                    b.Property<string>("Id_share")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Createat")
                        .HasColumnType("datetime2");

                    b.Property<string>("aliasurl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_share");

                    b.ToTable("Sharecustomer", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Slidepage", b =>
                {
                    b.Property<string>("Id_slidepage")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("sort")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_slidepage");

                    b.ToTable("Slidepage", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Specialty", b =>
                {
                    b.Property<int>("Id_Specialty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Specialty"));

                    b.Property<string>("Achievement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Alias_url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Machine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Specialty");

                    b.ToTable("Specialty", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.TimeWork", b =>
                {
                    b.Property<string>("Id_timework")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_timework");

                    b.ToTable("TimeWork", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Titleheader", b =>
                {
                    b.Property<string>("Id_titleheader")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id_header")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_titleheader");

                    b.HasIndex("Id_header");

                    b.ToTable("Titleheader", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Videos", b =>
                {
                    b.Property<int>("Id_video")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_video"));

                    b.Property<DateTime>("Created_at_video")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description_video")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link_video")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status_video")
                        .HasColumnType("bit");

                    b.Property<string>("Title_video")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_video");

                    b.ToTable("Videos", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Workschedule", b =>
                {
                    b.Property<int>("Id_workschedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_workschedule"));

                    b.Property<string>("Afternoon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Evening")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id_worksdoctor")
                        .HasColumnType("int");

                    b.Property<string>("Morning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id_workschedule");

                    b.HasIndex("Id_worksdoctor");

                    b.ToTable("Workschedule", (string)null);
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Worksdoctor", b =>
                {
                    b.Property<int>("Id_worksdoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_worksdoctor"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_doctor")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_worksdoctor");

                    b.HasIndex("Id_doctor");

                    b.ToTable("Worksdoctor", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("websitebenhvien.Models.Enitity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("websitebenhvien.Models.Enitity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("websitebenhvien.Models.Enitity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("websitebenhvien.Models.Enitity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.ButtonSample", b =>
                {
                    b.HasOne("websitebenhvien.Models.Enitity.SampleMessage", "SampleMessage")
                        .WithMany("ButtonSamples")
                        .HasForeignKey("Id_SampleMessage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SampleMessage");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Doctor", b =>
                {
                    b.HasOne("websitebenhvien.Models.Enitity.Specialty", "Specialty")
                        .WithMany("Doctor")
                        .HasForeignKey("Id_specialty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Feeldoctor", b =>
                {
                    b.HasOne("websitebenhvien.Models.Enitity.Doctor", "Doctor")
                        .WithMany("Feeldoctor")
                        .HasForeignKey("Id_Doctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.ListvideoSpectialty", b =>
                {
                    b.HasOne("websitebenhvien.Models.Enitity.Specialty", "Specialty")
                        .WithMany("ListvideoSpectialty")
                        .HasForeignKey("Id_Specialty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Makeanappointment", b =>
                {
                    b.HasOne("websitebenhvien.Models.Enitity.Specialty", "Specialty")
                        .WithMany("Makeanappointment")
                        .HasForeignKey("Id_Specialty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Menuchild", b =>
                {
                    b.HasOne("websitebenhvien.Models.Enitity.Menu", "Menu")
                        .WithMany("Menuchilds")
                        .HasForeignKey("Id_menu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.News", b =>
                {
                    b.HasOne("websitebenhvien.Models.Enitity.Categorynews", "Categorynews")
                        .WithMany("News")
                        .HasForeignKey("Id_Categorynews")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categorynews");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.PermissionUser", b =>
                {
                    b.HasOne("websitebenhvien.Models.Enitity.Permissions", "Permissions")
                        .WithMany("Users")
                        .HasForeignKey("id_PermissionUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("websitebenhvien.Models.Enitity.ApplicationUser", "User")
                        .WithMany("PermissionUsers")
                        .HasForeignKey("id_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permissions");

                    b.Navigation("User");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Postrelate", b =>
                {
                    b.HasOne("websitebenhvien.Models.Enitity.Specialty", "Specialty")
                        .WithMany("Postrelate")
                        .HasForeignKey("Id_Specialty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Product", b =>
                {
                    b.HasOne("websitebenhvien.Models.Enitity.Categoryproduct", "Categoryproduct")
                        .WithMany("Products")
                        .HasForeignKey("Id_Categoryproduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoryproduct");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Proimages", b =>
                {
                    b.HasOne("websitebenhvien.Models.Enitity.Product", "Product")
                        .WithMany("Proimages")
                        .HasForeignKey("Id_product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Titleheader", b =>
                {
                    b.HasOne("websitebenhvien.Models.Enitity.Header", "Header")
                        .WithMany("titleheader")
                        .HasForeignKey("Id_header")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Header");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Workschedule", b =>
                {
                    b.HasOne("websitebenhvien.Models.Enitity.Worksdoctor", "Worksdoctor")
                        .WithMany("Workschedules")
                        .HasForeignKey("Id_worksdoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worksdoctor");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Worksdoctor", b =>
                {
                    b.HasOne("websitebenhvien.Models.Enitity.Doctor", "Doctor")
                        .WithMany("Worksdoctor")
                        .HasForeignKey("Id_doctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.ApplicationUser", b =>
                {
                    b.Navigation("PermissionUsers");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Categorynews", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Categoryproduct", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Doctor", b =>
                {
                    b.Navigation("Feeldoctor");

                    b.Navigation("Worksdoctor");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Header", b =>
                {
                    b.Navigation("titleheader");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Menu", b =>
                {
                    b.Navigation("Menuchilds");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Permissions", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Product", b =>
                {
                    b.Navigation("Proimages");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.SampleMessage", b =>
                {
                    b.Navigation("ButtonSamples");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Specialty", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("ListvideoSpectialty");

                    b.Navigation("Makeanappointment");

                    b.Navigation("Postrelate");
                });

            modelBuilder.Entity("websitebenhvien.Models.Enitity.Worksdoctor", b =>
                {
                    b.Navigation("Workschedules");
                });
#pragma warning restore 612, 618
        }
    }
}
